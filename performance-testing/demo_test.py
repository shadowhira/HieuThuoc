#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script demo ƒë·ªÉ ki·ªÉm th·ª≠ hi·ªáu nƒÉng v·ªõi d·ªØ li·ªáu m·∫´u
Ch·∫°y nhanh ƒë·ªÉ ki·ªÉm tra c·∫•u h√¨nh
"""

import requests
import time
import csv
from datetime import datetime

def demo_performance_test():
    """Ch·∫°y ki·ªÉm th·ª≠ hi·ªáu nƒÉng demo v·ªõi √≠t request"""
    
    print("="*60)
    print("DEMO KI·ªÇM TH·ª¨ HI·ªÜU NƒÇNG - B√ÅO C√ÅO DOANH THU")
    print("="*60)
    
    base_url = "http://localhost:8080"
    results = []
    
    # ƒê·ªãnh nghƒ©a test cases
    test_cases = [
        {
            'name': 'Doanh Thu Theo Ngay',
            'endpoint': '/baocao/doanhthutheongay',
            'params': {'ngay': '2024-12-19'}
        },
        {
            'name': 'Doanh Thu Theo Thang',
            'endpoint': '/baocao/doanhthutheothang',
            'params': {'nam': 2024, 'thang': 12}
        },
        {
            'name': 'Doanh Thu Theo Nam',
            'endpoint': '/baocao/doanhthutheonam',
            'params': {'nam': 2024}
        }
    ]
    
    print("Ki·ªÉm tra k·∫øt n·ªëi server...")
    try:
        response = requests.get(f"{base_url}/baocao/doanhthutheongay?ngay=2024-12-19", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Server ƒëang ho·∫°t ƒë·ªông")
        else:
            print(f"‚ö†Ô∏è  Server tr·∫£ v·ªÅ status code: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server: {e}")
        print("H√£y ƒë·∫£m b·∫£o server ƒëang ch·∫°y t·∫°i http://localhost:8080")
        return
    
    print("\nB·∫Øt ƒë·∫ßu ki·ªÉm th·ª≠ hi·ªáu nƒÉng...")
    
    # Ch·∫°y m·ªói test case 3 l·∫ßn
    for test_case in test_cases:
        print(f"\nƒêang test: {test_case['name']}")
        
        for i in range(3):
            start_time = time.time()
            try:
                response = requests.get(
                    f"{base_url}{test_case['endpoint']}", 
                    params=test_case['params'], 
                    timeout=10
                )
                end_time = time.time()
                
                response_time = (end_time - start_time) * 1000
                
                result = {
                    'test_name': test_case['name'],
                    'iteration': i + 1,
                    'status_code': response.status_code,
                    'response_time_ms': response_time,
                    'response_size_bytes': len(response.content),
                    'success': response.status_code == 200,
                    'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                }
                
                results.append(result)
                
                status_icon = "‚úÖ" if response.status_code == 200 else "‚ùå"
                print(f"  {status_icon} L·∫ßn {i+1}: {response_time:.2f}ms (Status: {response.status_code})")
                
            except requests.exceptions.Timeout:
                end_time = time.time()
                response_time = (end_time - start_time) * 1000
                result = {
                    'test_name': test_case['name'],
                    'iteration': i + 1,
                    'status_code': None,
                    'response_time_ms': response_time,
                    'response_size_bytes': 0,
                    'success': False,
                    'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                }
                results.append(result)
                print(f"  ‚ùå L·∫ßn {i+1}: Timeout sau {response_time:.2f}ms")
                
            except Exception as e:
                end_time = time.time()
                response_time = (end_time - start_time) * 1000
                result = {
                    'test_name': test_case['name'],
                    'iteration': i + 1,
                    'status_code': None,
                    'response_time_ms': response_time,
                    'response_size_bytes': 0,
                    'success': False,
                    'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                }
                results.append(result)
                print(f"  ‚ùå L·∫ßn {i+1}: L·ªói - {e}")
    
    # T·∫°o b√°o c√°o t·ªïng h·ª£p
    print("\n" + "="*60)
    print("B√ÅO C√ÅO T·ªîNG H·ª¢P")
    print("="*60)
    
    # Nh√≥m k·∫øt qu·∫£ theo test name
    test_groups = {}
    for result in results:
        test_name = result['test_name']
        if test_name not in test_groups:
            test_groups[test_name] = []
        test_groups[test_name].append(result)
    
    for test_name, test_results in test_groups.items():
        print(f"\n{test_name}:")
        
        successful_tests = [r for r in test_results if r['success']]
        failed_tests = [r for r in test_results if not r['success']]
        
        print(f"  T·ªïng s·ªë test: {len(test_results)}")
        print(f"  Th√†nh c√¥ng: {len(successful_tests)}")
        print(f"  Th·∫•t b·∫°i: {len(failed_tests)}")
        print(f"  T·ª∑ l·ªá th√†nh c√¥ng: {(len(successful_tests)/len(test_results)*100):.1f}%")
        
        if successful_tests:
            response_times = [r['response_time_ms'] for r in successful_tests]
            avg_time = sum(response_times) / len(response_times)
            min_time = min(response_times)
            max_time = max(response_times)
            
            print(f"  Th·ªùi gian ph·∫£n h·ªìi (ms):")
            print(f"    - Trung b√¨nh: {avg_time:.2f}")
            print(f"    - T·ªëi thi·ªÉu: {min_time:.2f}")
            print(f"    - T·ªëi ƒëa: {max_time:.2f}")
            
            # ƒê√°nh gi√° hi·ªáu nƒÉng
            if avg_time < 2000:
                print(f"    - ƒê√°nh gi√°: ‚úÖ T·ªët")
            elif avg_time < 5000:
                print(f"    - ƒê√°nh gi√°: ‚ö†Ô∏è  Trung b√¨nh")
            else:
                print(f"    - ƒê√°nh gi√°: ‚ùå Ch·∫≠m")
        
        if failed_tests:
            print(f"  L·ªói g·∫∑p ph·∫£i:")
            for test in failed_tests:
                if test['status_code']:
                    print(f"    - HTTP {test['status_code']}")
                else:
                    print(f"    - Timeout/Connection Error")
    
    # L∆∞u k·∫øt qu·∫£ v√†o file CSV
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"demo_performance_test_{timestamp}.csv"
    
    with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
        fieldnames = ['test_name', 'iteration', 'status_code', 'response_time_ms', 
                     'response_size_bytes', 'success', 'timestamp']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(results)
    
    print(f"\nK·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o file: {filename}")
    
    # ƒê√°nh gi√° t·ªïng th·ªÉ
    print("\n" + "="*60)
    print("ƒê√ÅNH GI√Å T·ªîNG TH·ªÇ")
    print("="*60)
    
    total_tests = len(results)
    successful_tests = len([r for r in results if r['success']])
    overall_success_rate = (successful_tests / total_tests) * 100
    
    if successful_tests > 0:
        all_response_times = [r['response_time_ms'] for r in results if r['success']]
        overall_avg_time = sum(all_response_times) / len(all_response_times)
        
        print(f"T·ªïng s·ªë test: {total_tests}")
        print(f"T·ª∑ l·ªá th√†nh c√¥ng t·ªïng th·ªÉ: {overall_success_rate:.1f}%")
        print(f"Th·ªùi gian ph·∫£n h·ªìi trung b√¨nh: {overall_avg_time:.2f}ms")
        
        if overall_success_rate >= 95 and overall_avg_time < 2000:
            print("üéâ Hi·ªáu nƒÉng t·ªïng th·ªÉ: T·ªêT")
        elif overall_success_rate >= 90 and overall_avg_time < 5000:
            print("‚ö†Ô∏è  Hi·ªáu nƒÉng t·ªïng th·ªÉ: TRUNG B√åNH")
        else:
            print("‚ùå Hi·ªáu nƒÉng t·ªïng th·ªÉ: C·∫¶N C·∫¢I THI·ªÜN")
    else:
        print("‚ùå Kh√¥ng c√≥ test n√†o th√†nh c√¥ng!")

if __name__ == "__main__":
    demo_performance_test() 